# Generated by Django 4.2.9 on 2025-07-31 08:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('attendance', '0006_student_is_verified'),
    ]

    operations = [
        migrations.AlterField(
            model_name='attendancesettings',
            name='face_recognition_threshold',
            field=models.FloatField(default=0.9),
        ),
        migrations.CreateModel(
            name='StudentPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance_score', models.FloatField(help_text='Attendance percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('previous_grades', models.FloatField(help_text='Previous grades average (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assignment_completion', models.FloatField(help_text='Assignment completion rate (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('class_activeness', models.FloatField(help_text='Class participation and activeness (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attendance_weight', models.FloatField(default=30.0, help_text='Weight for attendance (default 30%)')),
                ('grades_weight', models.FloatField(default=40.0, help_text='Weight for previous grades (default 40%)')),
                ('assignment_weight', models.FloatField(default=20.0, help_text='Weight for assignments (default 20%)')),
                ('activeness_weight', models.FloatField(default=10.0, help_text='Weight for class activeness (default 10%)')),
                ('overall_score', models.FloatField(editable=False)),
                ('performance_category', models.CharField(choices=[('excellent', 'Excellent (90-100)'), ('very_good', 'Very Good (80-89)'), ('good', 'Good (70-79)'), ('satisfactory', 'Satisfactory (60-69)'), ('needs_improvement', 'Needs Improvement (50-59)'), ('poor', 'Poor (Below 50)')], editable=False, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('predicted_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_predictions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_predictions', to='attendance.student')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('student',)},
            },
        ),
    ]
